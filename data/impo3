import numpy as np
from scipy.linalg import sqrtm

def fidelity(rho, rho_ref):
    # Compute the square root of the reference density matrix.
    sqrt_rho_ref = sqrtm(rho_ref)

    #Compute the intermediate product sqrt(rho_ref) * rho * sqrt(rho_ref)
    intermediate = sqrt_rho_ref @ rho @ sqrt_rho_ref
    
    #Compute the square root of the intermediate product.
    sqrt_intermediate = sqrtm(intermediate)

    #Calculate the trace and ensure the result is real (to avoid small imaginary parts).
    fidelity_value = np.trace(sqrt_intermediate)
    fidelity_value = np.real(fidelity_value)

    #Return fidelity squared.
    return fidelity_value**2


rho = np.array([[ 1.01352309e-01+0.00000000e+00j,  5.08008936e-03-3.52853023e-03j,
  -3.38309814e-03+2.59720512e-03j,  4.82042913e-03-7.55451275e-04j,
  -3.08814384e-05-1.29487387e-03j,  2.33438505e-03-2.17781965e-03j,
  -1.65796194e-03+5.14659145e-03j, -6.60588979e-04-1.28915258e-03j,
  -3.91642811e-03-6.03138631e-04j, -3.54557482e-03-2.23267758e-03j],
 [ 5.08008936e-03+3.52853023e-03j,  9.99006144e-02+0.00000000e+00j,
  -1.11760758e-03-9.57024171e-06j,  5.05089420e-03-1.35570107e-03j,
  -2.65764451e-03-7.81125254e-05j,  2.99247172e-03-2.27497677e-03j,
   6.27434531e-04+3.52749978e-03j, -1.34524807e-03+1.82031627e-03j,
   5.45973928e-04-6.67680699e-05j, -2.47227712e-03-1.43122758e-03j],
 [-3.38309814e-03-2.59720512e-03j, -1.11760758e-03+9.57024171e-06j,
   9.72837546e-02+0.00000000e+00j,  1.06415245e-03-6.44677616e-03j,
   1.24953756e-03+4.48078428e-03j, -3.51460174e-03-6.25370277e-04j,
   3.40025238e-03+2.20726993e-03j, -3.18704719e-03-4.30840743e-03j,
   2.18558053e-03-3.58915773e-03j, -3.31463929e-03+3.43919895e-03j],
 [ 4.82042913e-03+7.55451275e-04j,  5.05089420e-03+1.35570107e-03j,
   1.06415245e-03+6.44677616e-03j,  1.04444820e-01+0.00000000e+00j,
   3.72875987e-03+7.44568446e-04j, -1.10278571e-03-1.52029742e-03j,
   4.90256381e-03-1.84964355e-03j, -2.83850049e-04-4.27476892e-03j,
   1.86018547e-03+1.84575127e-03j, -3.16774126e-03+3.77390417e-03j],
 [-3.08814384e-05+1.29487387e-03j, -2.65764451e-03+7.81125254e-05j,
   1.24953756e-03-4.48078428e-03j,  3.72875987e-03-7.44568446e-04j,
   9.58631535e-02+0.00000000e+00j,  5.63017821e-03+4.25088096e-03j,
   1.20542473e-03+1.58706555e-03j,  3.12460494e-03-1.54528993e-03j,
  -2.15388042e-03-7.31048159e-04j,  2.19540466e-03-1.27191468e-03j],
 [ 2.33438505e-03+2.17781965e-03j,  2.99247172e-03+2.27497677e-03j,
  -3.51460174e-03+6.25370277e-04j, -1.10278571e-03+1.52029742e-03j,
   5.63017821e-03-4.25088096e-03j,  9.93187930e-02+0.00000000e+00j,
   3.61518551e-03-4.02863044e-04j,  2.70029524e-03+3.33029583e-03j,
   2.16231829e-03+6.17185094e-04j,  4.03069030e-03+3.57479665e-04j],
 [-1.65796194e-03-5.14659145e-03j,  6.27434531e-04-3.52749978e-03j,
   3.40025238e-03-2.20726993e-03j,  4.90256381e-03+1.84964355e-03j,
   1.20542473e-03-1.58706555e-03j,  3.61518551e-03+4.02863044e-04j,
   1.00928085e-01+0.00000000e+00j, -2.10249346e-03-6.49970218e-04j,
  -1.37531234e-03+4.80392683e-03j,  1.74466091e-03+2.12664355e-03j],
 [-6.60588979e-04+1.28915258e-03j, -1.34524807e-03-1.82031627e-03j,
  -3.18704719e-03+4.30840743e-03j, -2.83850049e-04+4.27476892e-03j,
   3.12460494e-03+1.54528993e-03j,  2.70029524e-03-3.33029583e-03j,
  -2.10249346e-03+6.49970218e-04j,  9.81991304e-02+0.00000000e+00j,
  -1.69817780e-03+3.23657199e-04j, -3.70981936e-03-1.01027534e-03j],
 [-3.91642811e-03+6.03138631e-04j,  5.45973928e-04+6.67680699e-05j,
   2.18558053e-03+3.58915773e-03j,  1.86018547e-03-1.84575127e-03j,
  -2.15388042e-03+7.31048159e-04j,  2.16231829e-03-6.17185094e-04j,
  -1.37531234e-03-4.80392683e-03j, -1.69817780e-03-3.23657199e-04j,
   1.04759569e-01+0.00000000e+00j, -5.30541267e-03-5.45822848e-04j],
 [-3.54557482e-03+2.23267758e-03j, -2.47227712e-03+1.43122758e-03j,
  -3.31463929e-03-3.43919895e-03j, -3.16774126e-03-3.77390417e-03j,
   2.19540466e-03+1.27191468e-03j,  4.03069030e-03-3.57479665e-04j,
   1.74466091e-03-2.12664355e-03j, -3.70981936e-03+1.01027534e-03j,
  -5.30541267e-03+5.45822848e-04j,  9.79494816e-02+0.00000000e+00j]], dtype=complex)
    # Normalize rho so that trace(rho) = 1.
rho = rho / np.trace(rho)

    #Example reference state: the vacuum state (|0><0|) embedded in a 4-dimensional space.
rho_ref = np.zeros((10, 10), dtype=complex)
rho_ref[0, 0] = 1.0  # Only the first element is nonzero.

    #Compute the fidelity.
F = fidelity(rho, rho_ref)
print("Fidelity between rho and rho_ref:", F)